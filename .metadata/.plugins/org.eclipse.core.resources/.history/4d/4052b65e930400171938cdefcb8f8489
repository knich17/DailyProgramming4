/**
 * 
 */
package TheBestConjunction;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/**
 * @author Kane
 *
 */
public class TheBestConjunction {
	static HashSet<String> wordList;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		wordList = getWordList("wordlist.txt");

		for(int i = 1; true; i++) {		//for every min Length
			int bestWords = 0;
			String bestWord = "";
			int minLength = i;
			for(String word : wordList) {	//for every word in the list
				//replace bestword if current word contains more conjunctions
				String subWord = findSubword(word, minLength);
				int subWords = charCount(subWord, ' ');
				if (subWords > bestWords) {
					//cleanup string (remove trailing space, convert space seperators to ", ", add original word etc
					subWord = subWord.substring(0, subWord.length()-1);
					subWord = subWord.replace(" ", ", ");
					bestWords = subWords;
					bestWord = word + " - (" + subWord + ")";
				}
			}
			if(bestWord == "") break;
			System.out.print(minLength + ": " + bestWords + "w - " + bestWord + "\n");
			if(bestWords == 1) break;
		}
	}
	
//	public class Word {
//		String word;
//		int
//	}
	
	public static String findSubword(String word, int minLength) {
		if (word.length() < minLength) return null;
		//store subwords from this point
		String[] subwords = new String[word.length()+1];
		for(int i = minLength; i < word.length()+1; i++) {
			if(wordList.contains(word.substring(0, i))) {
				//add subword to list if not null
				subwords[i] = word.substring(0, i) + " ";
				String subword = findSubword(word.substring(i, word.length()), minLength);
				if(subword != null)
					subwords[i] += subword;
			}
		}
		
		int bestIndex = -1;
		int bestWords = 0;
		for(int i = minLength; i < word.length()+1; i++) {
			if(subwords[i] == null) continue;
			int wordCount = charCount(subwords[i], ' ');
			if(wordCount >= bestWords) {
				bestWords = wordCount;
				bestIndex = i;
			}
		}
		if(bestIndex >= 0)
			return subwords[bestIndex]; //reached the end
		return null;
	}
	
	public static int charCount(String word, char seperator) {
		if(word == null) return 0;
		int wordCount = 0;
		for(int j = 0; j < word.length(); j++) {
			if(word.charAt(j) == ' ') wordCount++;
		}
		return wordCount;
	}
	
	public static HashSet<String> getWordList(String fileName) {
		HashSet<String> wordList = new HashSet<String>();
		
		//read and store word list
		try(BufferedReader br = new BufferedReader(new FileReader(fileName))) {
		    String line = br.readLine();

		    while (line != null) {
		    	wordList.add(line.replace("\r\n",""));
		        line = br.readLine();
		    }
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return wordList;
	}

}
