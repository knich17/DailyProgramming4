/**
 * 
 */
package TheBestConjunction;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/**
 * @author Kane
 *
 */
public class TheBestConjunction {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		HashSet<String> wordList = new HashSet<String>();
		
		//read and store word list
		try(BufferedReader br = new BufferedReader(new FileReader("wordlist.txt"))) {
		    String line = br.readLine();

		    while (line != null) {
		    	wordList.add(line.replace("\r\n",""));
		        line = br.readLine();
		    }
		} catch (Exception e) {
			e.printStackTrace();
		}
		
//		for(String word : wordList) {
//			System.out.println(word + "-" + word.length());
//		}
//	    System.out.println("asdas");
		
		//for every word in the word list
		int bestWords = 0;
		String bestWord = "";
		int minLength = 5;
		for(String word : wordList) {
			//loop through the word, starting and the minimum subword length and increasing until subword is base word kinda thing
			String wordString = word + " - (";
			int position = 0;
			int currLength = minLength;
			int words = 0;
			while(position+currLength <= word.length() && position < word.length()) {
				if (wordList.contains(word.substring(position, position+currLength))) {
					if (words == 0) {
						wordString += word.substring(position, position+currLength);
					} else {
						wordString += ", " + word.substring(position, position+currLength);
					}
					words++;
					position += currLength; 
					currLength = minLength;
				} else {
					currLength++;
				}
			}
			if(words > bestWords) {
				bestWords = words;
				bestWord = wordString + ") - " + words + "\n";
			}
		}
		System.out.print(bestWord);
	}

}
